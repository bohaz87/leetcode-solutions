interface Server {
  weight: number;
  index: number;
  doneTime: number;
}

class MinHeap<T> {
  heap: T[];
  compareFn: (a: T, b: T) => number;
  constructor(compareFn: (a: T, b: T) => number, initHeapData: T[] = []) {
    this.compareFn = compareFn;
    this.heap = [];
    initHeapData.forEach((d) => this.insert(d));
  }

  getMin() {
    if (this.heap.length === 0) {
      return null;
    }
    return this.heap[0];
  }

  insert(node: T) {
    this.heap.push(node);
    const heap = this.heap;
    const length = heap.length;
    if (length > 1) {
      let current = length - 1;
      let parent = Math.ceil(current / 2) - 1;
      while (
        parent >= 0 &&
        this.compareFn(heap[parent] as T, heap[current] as T) > 0
      ) {
        [heap[parent], heap[current]] = [heap[current], heap[parent]];
        current = parent;
        parent = Math.ceil(current / 2) - 1;
      }
    }
  }

  remove() {
    if (this.heap.length === 0) {
      return null;
    }

    const smallest = this.heap[0];
    if (this.heap.length > 2) {
      const heap = this.heap;
      heap[0] = heap.pop() as T;
      const length = heap.length;
      let current = 0;
      let leftIndex = current * 2 + 1;
      let rightIndex = current * 2 + 2;

      while (
        current < length &&
        ((leftIndex < length &&
          this.compareFn(heap[current], heap[leftIndex]) > 0) ||
          (rightIndex < length &&
            this.compareFn(heap[current], heap[rightIndex]) > 0))
      ) {
        const swapWithLeft =
          rightIndex >= length ||
          this.compareFn(heap[leftIndex], heap[rightIndex]) < 0;
        if (swapWithLeft) {
          [heap[current], heap[leftIndex]] = [heap[leftIndex], heap[current]];
          current = leftIndex;
          leftIndex = leftIndex * 2 + 1;
          rightIndex = leftIndex + 1;
        } else {
          [heap[current], heap[rightIndex]] = [heap[rightIndex], heap[current]];
          current = rightIndex;
          leftIndex = rightIndex * 2 + 1;
          rightIndex = leftIndex + 1;
        }
      }
    } else {
      this.heap.shift();
    }

    return smallest;
  }
}

function compareServer(a: Server, b: Server) {
  if (a.weight === b.weight) {
    return a.index - b.index;
  } else {
    return a.weight - b.weight;
  }
}

function assignTasks(servers: number[], tasks: number[]): number[] {
  const freeServerHeap = new MinHeap(
    compareServer,
    servers.map((weight, index) => ({ weight, index, doneTime: 0 }))
  );
  const usedServerHeap = new MinHeap((a: Server, b: Server) => {
    if (a.doneTime - b.doneTime) {
      return a.doneTime - b.doneTime;
    } else {
      return compareServer(a, b);
    }
  }, []);

  const ans: number[] = [];
  const taskLength = tasks.length;

  for (let i = 0; i < taskLength; i++) {
    while (
      usedServerHeap.getMin() &&
      (usedServerHeap.getMin() as Server).doneTime <= i
    ) {
      freeServerHeap.insert(usedServerHeap.remove() as Server);
    }

    const server =
      freeServerHeap.remove() || (usedServerHeap.remove() as Server);
    ans.push(server.index);
    server.doneTime = Math.max(i, server.doneTime) + tasks[i];
    usedServerHeap.insert(server);
  }

  return ans;
}

import { strict as assert } from "assert";

assert.deepEqual(
  assignTasks([3, 3, 2], [1, 2, 3, 2, 1, 2]),
  [2, 2, 0, 2, 1, 2],
  "case 1"
);
assert.deepEqual(
  assignTasks([5, 1, 4, 3, 2], [2, 1, 2, 4, 5, 2, 1]),
  [1, 4, 1, 4, 1, 3, 2],
  "case 2"
);
assert.deepEqual(
  assignTasks(
    [10, 63, 95, 16, 85, 57, 83, 95, 6, 29, 71],
    [70, 31, 83, 15, 32, 67, 98, 65, 56, 48, 38, 90, 5]
  ),
  [8, 0, 3, 9, 5, 1, 10, 6, 4, 2, 7, 9, 0],
  "case 3"
);

const x = assignTasks(
  [
    988, 390, 311, 409, 205, 885, 209, 92, 94, 859, 533, 295, 455, 320, 615, 52,
    291, 879, 638, 757, 810, 714, 946, 527, 128, 487, 551, 28, 204, 673, 742,
    817, 93, 30, 758, 169, 432, 53, 89, 510, 377, 722, 525, 556, 1000, 108, 696,
    583, 527, 537, 781, 248, 201, 201, 218, 151, 586, 29, 853, 340, 833, 883,
    293, 981, 728, 928, 848, 916, 873, 105, 721, 146, 498, 870, 186, 105, 291,
    341, 348, 511, 466, 889, 967, 796, 315, 20, 296, 525, 240, 104, 171, 558,
    672, 124, 827, 868, 993, 121, 72, 545, 851, 932, 302, 249, 520, 763, 364,
    97, 410, 414, 31, 992, 576, 403, 165, 89, 7, 709, 530, 701, 886, 570, 640,
    444, 790, 371, 47, 49, 328, 792, 398, 159, 863, 912, 594, 804, 635, 462,
    489, 607, 230, 522, 705, 636, 14, 508, 213, 827, 313, 952, 839, 866, 319,
    30, 427, 475, 24, 654, 212, 468, 768, 718, 910, 795, 322, 399, 76, 788, 641,
    416, 926, 670, 947, 242, 273, 668, 194, 536, 907, 747, 177, 590, 841, 118,
    219, 438, 527, 115, 561, 945, 454, 589, 600, 813, 666, 810, 11, 447, 749,
    765, 40, 37, 590, 431, 959, 353, 64, 843, 791, 258, 124, 587, 330, 51, 804,
    379, 781, 626, 808, 902, 846, 905, 27, 938, 169, 149, 130, 896, 870, 41,
    682, 27, 188, 201, 313, 260, 119, 20, 270, 572, 176, 287, 530, 899, 155, 70,
    944, 53, 519, 179, 963, 693, 429, 989, 956, 708, 466, 764, 160, 730, 641,
    831, 376, 555, 801, 340, 219, 789, 895, 242, 881, 189, 360, 597, 90, 271,
    295, 645, 247, 795, 41, 290, 233, 468, 201, 138, 22, 666, 463, 820, 285,
    382, 207, 688, 607, 204, 131, 738, 605, 266, 908, 213, 621, 246, 132, 168,
    633, 499, 913, 273, 885, 317, 438, 876, 960, 35, 388, 878, 858, 38, 217,
    112, 820, 767, 95, 180, 851, 808, 628, 84, 384, 424, 468, 344, 499, 428,
    754, 849, 1000, 210, 779, 392, 232, 17, 813, 693, 668, 221, 713, 982, 840,
    516, 614, 132, 119, 212, 229, 854, 3, 962, 742, 318, 562, 778, 894, 625,
    779, 605, 849, 935, 704, 977, 262, 554, 398, 926, 628, 379, 250, 310, 839,
    450, 995, 103, 801, 504, 814, 935, 142, 617, 820, 255, 655, 363, 122, 616,
    789, 786, 908, 836, 907, 161, 283, 65, 100, 985, 761, 521, 954, 691, 484,
    899, 374, 463, 441, 795, 152, 952, 283, 236, 179, 659, 558, 646, 805, 798,
    97, 239, 404, 160, 615, 277, 418, 691, 42, 920, 803, 269, 24, 565, 302, 588,
    780, 947, 103, 934, 587, 510, 733, 794, 553, 902, 815, 425, 621, 247, 593,
    651, 728, 135, 622, 790, 814, 714, 480, 380, 216, 25, 24, 138, 845, 799,
    691, 328, 342, 777, 197, 33, 321, 473, 673, 202, 533, 396, 383, 38, 634, 36,
    553, 754, 547, 423, 174, 332, 325, 251, 353, 670, 987, 608, 73, 129, 929,
    619, 405, 803, 974, 174, 39, 664, 47, 251, 441, 750, 795, 180, 588, 241,
    216, 579, 86, 499, 687, 987, 91, 520, 492, 839, 150, 842, 363, 542, 399,
    690, 604, 570, 220, 15, 262, 348, 412, 224, 645, 193, 948, 376, 357, 782,
    303, 971, 930, 764, 83, 305, 873, 506, 519, 631, 446, 702, 123, 703, 555,
    464, 264, 321, 630, 560, 52, 759, 50, 881, 431, 321, 4, 428, 518, 299, 657,
    387, 816, 61, 828, 384, 677, 415, 944, 981, 517, 203, 406, 444, 452, 633,
    838, 255, 812, 351, 53, 632, 561, 70, 938,
  ],
  [
    120, 632, 959, 811, 918, 888, 326, 541, 420, 199, 57, 497, 309, 495, 28,
    614, 308, 11, 876, 132, 928, 101, 880, 846, 117, 718, 712, 678, 921, 752,
    862, 141, 730, 620, 419, 377, 561, 645, 889, 902, 89, 548, 220, 986, 451,
    169, 191, 207, 401, 1000, 11, 715, 879, 197, 663, 744, 319, 45, 146, 14,
    229, 833, 377, 347, 570, 391, 13, 805, 615, 307, 765, 644, 708, 583, 724,
    44, 297, 385, 259, 26, 248, 829, 50, 929, 604, 734, 518, 439, 905, 540, 609,
    236, 468, 184, 837, 951, 926, 185, 401, 515, 81, 682, 697, 268, 201, 368,
    708, 120, 229, 658, 539, 288, 109, 139, 944, 166, 852, 848, 149, 373, 129,
    879, 984, 449, 737, 519, 231, 228, 264, 681, 820, 32, 792, 795, 418, 902,
    850, 150, 105, 154, 90, 923, 237, 433, 225, 535, 168, 232, 132, 973, 823,
    143, 392, 668, 771, 646, 551, 761, 473, 916, 983, 469, 820, 165, 145, 337,
    713, 631, 342, 226, 389, 216, 136, 757, 762, 702, 651, 644, 194, 666, 277,
    955, 76, 13, 266, 578, 370, 669, 119, 239, 70, 246, 839, 129, 58, 773, 334,
    83, 90, 226, 411, 349, 826, 119, 164, 329, 652, 580, 5, 284, 53, 313, 954,
    292, 824, 383, 368, 108, 811, 295, 876, 511, 846, 152, 106, 305, 319, 365,
    70, 363, 5, 869, 629, 452, 810, 459, 80, 287, 801, 90, 467, 509, 939, 989,
    75, 798, 179, 685, 90, 542, 259, 394, 826, 138, 275, 964, 958, 820, 541,
    651, 934, 285, 773, 290, 800, 530, 9, 192, 780, 191, 764, 601, 610, 394,
    328, 759, 563, 902, 175, 66, 792, 290, 8, 289, 53, 832, 367, 949, 10, 430,
    490, 769, 15, 217, 3, 641, 607, 912, 802, 522, 728, 994, 10, 431, 414, 183,
    791, 714, 648, 633, 250, 467, 421, 678, 346, 436, 873, 358, 966, 383, 273,
    342, 744, 270, 349, 885, 551, 566, 997, 17, 462, 623, 284, 200, 566, 721,
    219, 142, 434, 485, 212, 509, 960, 340, 349, 820, 819, 527, 610, 784, 288,
    678, 419, 75, 12, 520,
  ]
);

const y = [
  358, 574, 116, 196, 144, 537, 343, 85, 237, 286, 156, 438, 468, 467, 222, 231,
  27, 57, 33, 153, 110, 477, 315, 487, 201, 319, 485, 508, 57, 200, 229, 280,
  434, 126, 510, 127, 570, 213, 15, 568, 37, 247, 222, 598, 581, 206, 403, 245,
  601, 98, 500, 166, 552, 329, 520, 38, 115, 274, 524, 7, 32, 500, 8, 324, 107,
  426, 404, 156, 383, 444, 89, 69, 75, 7, 45, 321, 187, 183, 236, 404, 354, 97,
  394, 560, 93, 210, 24, 501, 226, 296, 304, 353, 459, 285, 469, 388, 71, 225,
  528, 55, 416, 244, 274, 131, 258, 404, 429, 401, 114, 305, 35, 224, 90, 492,
  507, 240, 180, 249, 420, 321, 358, 325, 477, 515, 74, 232, 271, 543, 176, 37,
  476, 52, 394, 53, 233, 284, 481, 589, 28, 295, 4, 201, 292, 6, 339, 158, 355,
  146, 301, 466, 518, 153, 320, 54, 184, 266, 536, 347, 541, 356, 140, 342, 282,
  52, 419, 427, 88, 517, 173, 269, 303, 278, 280, 455, 51, 103, 378, 495, 511,
  391, 595, 416, 209, 235, 372, 538, 564, 299, 437, 238, 275, 174, 309, 431,
  402, 418, 235, 290, 241, 281, 16, 76, 62, 11, 524, 276, 86, 577, 286, 102,
  440, 548, 553, 286, 206, 379, 2, 148, 234, 84, 311, 90, 361, 152, 13, 478,
  565, 401, 573, 164, 4, 494, 128, 473, 212, 4, 493, 403, 59, 265, 77, 474, 333,
  28, 78, 539, 597, 205, 496, 358, 329, 546, 492, 402, 245, 272, 393, 530, 209,
  106, 275, 125, 222, 440, 412, 262, 545, 420, 40, 215, 377, 465, 291, 484, 330,
  545, 583, 285, 579, 316, 301, 240, 225, 290, 1, 341, 483, 589, 241, 32, 225,
  130, 374, 295, 153, 165, 532, 153, 241, 573, 113, 428, 504, 590, 3, 258, 108,
  437, 280, 419, 374, 540, 504, 109, 355, 585, 493, 169, 432, 78, 491, 468, 431,
  11, 27, 148, 331, 353, 354, 52, 13, 265, 343, 453, 154, 335, 575, 236, 114,
  496, 1, 252, 203, 572, 36, 316, 52, 185, 312, 414, 512, 123, 591, 558, 197,
  543,
];

x.forEach((a, i) => {
  if (a !== y[i]) {
    console.log(a, y[i], i);
  }
});

assert.deepEqual(x, y, "case xy");

console.time();
const a = assignTasks(
  [
    338, 890, 301, 532, 284, 930, 426, 616, 919, 267, 571, 140, 716, 859, 980,
    469, 628, 490, 195, 664, 925, 652, 503, 301, 917, 563, 82, 947, 910, 451,
    366, 190, 253, 516, 503, 721, 889, 964, 506, 914, 986, 718, 520, 328, 341,
    765, 922, 139, 911, 578, 86, 435, 824, 321, 942, 215, 147, 985, 619, 865,
  ],
  [
    773, 537, 46, 317, 233, 34, 712, 625, 336, 221, 145, 227, 194, 693, 981,
    861, 317, 308, 400, 2, 391, 12, 626, 265, 710, 792, 620, 416, 267, 611, 875,
    361, 494, 128, 133, 157, 638, 632, 2, 158, 428, 284, 847, 431, 94, 782, 888,
    44, 117, 489, 222, 932, 494, 948, 405, 44, 185, 587, 738, 164, 356, 783,
    276, 547, 605, 609, 930, 847, 39, 579, 768, 59, 976, 790, 612, 196, 865,
    149, 975, 28, 653, 417, 539, 131, 220, 325, 252, 160, 761, 226, 629, 317,
    185, 42, 713, 142, 130, 695, 944, 40, 700, 122, 992, 33, 30, 136, 773, 124,
    203, 384, 910, 214, 536, 767, 859, 478, 96, 172, 398, 146, 713, 80, 235,
    176, 876, 983, 363, 646, 166, 928, 232, 699, 504, 612, 918, 406, 42, 931,
    647, 795, 139, 933, 746, 51, 63, 359, 303, 752, 799, 836, 50, 854, 161, 87,
    346, 507, 468, 651, 32, 717, 279, 139, 851, 178, 934, 233, 876, 797, 701,
    505, 878, 731, 468, 884, 87, 921, 782, 788, 803, 994, 67, 905, 309, 2, 85,
    200, 368, 672, 995, 128, 734, 157, 157, 814, 327, 31, 556, 394, 47, 53, 755,
    721, 159, 843,
  ]
);
console.timeEnd();

const b = [
  26, 50, 47, 11, 56, 31, 18, 55, 32, 9, 4, 2, 23, 53, 43, 0, 44, 30, 6, 51, 29,
  51, 15, 17, 22, 34, 38, 33, 42, 3, 25, 10, 49, 51, 7, 58, 16, 21, 19, 31, 19,
  12, 41, 35, 45, 52, 13, 59, 47, 36, 1, 28, 48, 39, 24, 8, 46, 20, 5, 54, 27,
  37, 14, 57, 40, 59, 8, 45, 4, 51, 47, 7, 58, 4, 31, 23, 54, 7, 9, 56, 2, 46,
  56, 1, 17, 42, 11, 30, 12, 44, 14, 32, 7, 10, 23, 1, 29, 27, 6, 10, 33, 24,
  19, 10, 35, 30, 35, 10, 17, 49, 50, 36, 29, 1, 48, 44, 7, 11, 24, 57, 42, 30,
  10, 55, 3, 20, 38, 15, 7, 46, 32, 21, 40, 16, 59, 30, 53, 17, 18, 22, 51, 11,
  53, 36, 57, 26, 5, 36, 56, 55, 31, 34, 57, 7, 52, 37, 31, 10, 0, 51, 41, 2,
  32, 25, 0, 7, 49, 47, 13, 14, 24, 57, 28, 4, 45, 43, 39, 38, 8, 2, 44, 45, 29,
  25, 25, 12, 54, 5, 44, 30, 27, 23, 26, 7, 33, 58, 41, 25, 52, 40, 58, 9, 52,
  40,
];

assert.deepEqual(a, b, "case end");

import fs from "fs";
Array(5)
  .fill(0)
  .forEach((x, i) => {
    i = i + 1;
    const data = fs
      .readFileSync(`./src/process-tasks-using-servers/data${i}.txt`, {
        encoding: "utf-8",
      })
      .split("\n");
    const args = [JSON.parse(data[0]), JSON.parse(data[1])];
    console.time("data" + i);
    assignTasks(args[0], args[1]);
    console.timeEnd("data" + i);
  });
